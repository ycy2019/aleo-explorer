{% extends "base.jinja2" %}

{% block title %}Mining Calculator - Haruka's Aleo Mining Pool{% endblock %}

{% block head %}
    <style>
    .sup {
        font-size: 1rem;
        vertical-align: super;
    }
    </style>

{% endblock %}

{% block content %}

    <div class="content">

        <h3>Calculator</h3>

        <p>
            The network difficulty is constantly changing, so the calculation below cannot be used as earning prediction.
            <br>
            "Average credit per day" assumes 2 credit per solution on average<span class="sup">*</span>.
        </p>

        <form action="#">
            <div class="grid-x grid-padding-x">
                <div class="cell small-2">
                    <label for="proof_input" class="text-right middle">Proof target: </label>
                </div>
                <div class="cell small-2">
                    <label class="middle">{{ proof_target }}</label>
                </div>
            </div>
            <div class="grid-x grid-padding-x">
                <div class="cell small-2">
                    <label for="proof_input" class="text-right middle">Prover speed: </label>
                </div>
                <div class="cell small-2">
                    <div class="input-group">
                        <input class="input-group-field" id="proof_input" type="number" name="ps" placeholder="">
                        <span class="input-group-label">c/s</span>
                    </div>
                </div>
            </div>
            <div class="grid-x grid-padding-x">
                <div class="cell small-3 small-offset-2">
                    <button class="button" value="Calculate" onclick="calculate(event)">Calculate</button>
                </div>
            </div>
        </form>
        <p>
            Time to find a solution (dd:hh:mm:ss):
            <br> <span id="result"></span><br>
        </p>
        <br>
        <p class="note">
            * Mathematical average from all valid solutions during testnet3. While it should be achieveable in the long
            run, most solutions should have rewards around 0.5 - 1 credit.
        </p>
    </div>

{% endblock %}

{% block content_script %}
<script>
    function sec_to_human(sec) {
        const days = Math.floor(sec / 86400);
        const hours = Math.floor((sec - (days * 86400)) / 3600);
        const minutes = Math.floor((sec - (days * 86400) - (hours * 3600)) / 60);
        const seconds = Math.floor(sec % 60);
        if (sec < 3600) {
            return (minutes < 10 ? "0" + minutes : minutes) + ":" + (seconds < 10 ? "0" + seconds : seconds)
        } else if (sec < 86400) {
            return (hours < 10 ? "0" + hours : hours) + ":" + (minutes < 10 ? "0" + minutes : minutes) + ":" + (seconds < 10 ? "0" + seconds : seconds)
        } else {
            return days + ":" + (hours < 10 ? "0" + hours : hours) + ":" + (minutes < 10 ? "0" + minutes : minutes) + ":" + (seconds < 10 ? "0" + seconds : seconds)
        }
    }

    function calculate(e) {
        e.preventDefault();
        const ps = parseFloat(document.getElementById("proof_input").value)
        const proof_target = {{ proof_target }}
        const result = document.getElementById("result")
        const average = sec_to_human(proof_target / ps)
        const daily = 2 * (86400 / (proof_target / ps))

        const p_inv = 1 - (1 / proof_target)
        let cp = 1
        let lower = 0.223142603 * proof_target
        let upper = 1.609434172 * proof_target
        /*for (let n = 0; n < weight * 3; n++) {
            cp *= p_inv
            if (lower === 0 && cp < 0.8) {
                lower = n
            }
            if (cp < 0.2) {
                upper = n
                break
            }
        }*/
        const lower_time = sec_to_human(lower / ps)
        const upper_time = sec_to_human(upper / ps)

        result.innerHTML = `Average: ${average}<br> CDF [0.2, 0.8]: ${lower_time} - ${upper_time} <br>
Average testnet credit per day: ${daily.toFixed(6)}`
    }
</script>
{% endblock %}